<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dravin&#39;s Blog</title>
  
  <subtitle>代码酒吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dravinbox.github.io/"/>
  <updated>2018-01-31T02:20:04.000Z</updated>
  <id>http://dravinbox.github.io/</id>
  
  <author>
    <name>Dravin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMvc实现RESTful风格</title>
    <link href="http://dravinbox.github.io/2018/01/31/restful/"/>
    <id>http://dravinbox.github.io/2018/01/31/restful/</id>
    <published>2018-01-31T02:14:13.000Z</published>
    <updated>2018-01-31T02:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnzklg5hlyj30fk07ojrf.jpg" alt="图片"></p><h2 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h2><p>-符合REST约束风格和原则的应用程序或设计就是RESTful.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg:  /emp/1  HTTP GET      查询id=1的emp</span><br><span class="line"></span><br><span class="line">      /emp/1  HTTP DELETE    删除id=1的emp,实验中直接删除会报405错误，但是采用$.ajax异步删除就没问题</span><br><span class="line"></span><br><span class="line">      /emp/1  HTTP PUT    跟新emp</span><br><span class="line"></span><br><span class="line">      /emp/add  HTTP POST     新增emp</span><br></pre></td></tr></table></figure><h2 id="Spring对RESTful的支持"><a href="#Spring对RESTful的支持" class="headerlink" title="Spring对RESTful的支持"></a>Spring对RESTful的支持</h2><ul><li><p>Spring MVC 对 RESTful应用提供了以下支持</p></li><li><p>利用@RequestMapping 指定要处理请求的URI模板和HTTP请求的动作类型</p></li><li><p>利用@PathVariable讲URI请求模板中的变量映射到处理方法参数上</p></li><li><p>利用Ajax,在客户端发出PUT、DELETE动作的请求</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id, Model model) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestMapping的一般应用格式"><a href="#RequestMapping的一般应用格式" class="headerlink" title="RequestMapping的一般应用格式"></a>RequestMapping的一般应用格式</h2><p>@RequestMapping(value = “/{id}”, method = RequestMethod.GET)</p><p> @RequestMapping(value = “/{id}”, method = RequestMethod.POST)</p><p> @RequestMapping(value = “/{id}”, method = RequestMethod.DELETE)   // 因为这个需要Ajax请求，所有返回的是个json</p><p> @ResponseBody</p><p> @RequestMapping(value = “/{id}”, method = RequestMethod.PUT)</p><h2 id="客户端发送PUT，DELETE请求-可以采用Ajax方式发送PUT和DELETE请求"><a href="#客户端发送PUT，DELETE请求-可以采用Ajax方式发送PUT和DELETE请求" class="headerlink" title="客户端发送PUT，DELETE请求 , 可以采用Ajax方式发送PUT和DELETE请求"></a>客户端发送PUT，DELETE请求 , 可以采用Ajax方式发送PUT和DELETE请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax( &#123;  </span><br><span class="line">        type : <span class="string">"DELETE"</span>,  </span><br><span class="line">        url : <span class="string">"/spring_crud_restful/emp/deleteEmp/"</span> + id,  </span><br><span class="line">        dataType : <span class="string">"json"</span>,  </span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">            alert(data);  </span><br><span class="line">            location.href = <span class="string">"/spring_crud_restful/emp/listEmp/1"</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="静态资源访问处理"><a href="#静态资源访问处理" class="headerlink" title="静态资源访问处理"></a>静态资源访问处理</h2><p>采用RESTful架构后，需要将web.xml中控制器拦截的请求设置为/，这样会将css,js等静态资源进行拦截，发送404错误。</p><p>解决方法：</p><p>–配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources/&gt; </span><br><span class="line"></span><br><span class="line">&lt;mvc:resources mapping=&quot;请求URI&quot; location=&quot;资源位置&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>–配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RESTful&quot;&gt;&lt;a href=&quot;#RESTful&quot; class=&quot;headerlink&quot; title=&quot;RESTful&quot;&gt;&lt;/a&gt;RESTful&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1
      
    
    </summary>
    
      <category term="Spring" scheme="http://dravinbox.github.io/categories/Spring/"/>
    
      <category term="SpringMvc" scheme="http://dravinbox.github.io/categories/Spring/SpringMvc/"/>
    
    
      <category term="RESTful" scheme="http://dravinbox.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>微信支付-服务商下的公众号支付</title>
    <link href="http://dravinbox.github.io/2018/01/20/weixin-subapp-pay/"/>
    <id>http://dravinbox.github.io/2018/01/20/weixin-subapp-pay/</id>
    <published>2018-01-20T03:08:58.000Z</published>
    <updated>2018-01-20T09:08:56.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务商下的公众号支付"><a href="#服务商下的公众号支付" class="headerlink" title="服务商下的公众号支付"></a>服务商下的公众号支付</h1><p>在服务商模式下，必须传本公众号和用户的openid 给服务商来生成jsapi支付参数。<br>最近有个坑，前端怎么调都是没法支付，只是转一下就没了。<br>最后发现是服务商那里没有配置该子商户的公众号支付的域名：<br>登陆服务商的微信商户后台，找到该子商户，点击配置，添加一个域名。</p><h2 id="单例页面的微信支付"><a href="#单例页面的微信支付" class="headerlink" title="单例页面的微信支付"></a>单例页面的微信支付</h2><p>之前一直都是 <a href="http://xxxx/#/paypage" target="_blank" rel="noopener">http://xxxx/#/paypage</a><br>改为<a href="http://xxxx/#/pay/paypage" target="_blank" rel="noopener">http://xxxx/#/pay/paypage</a> 就可以</p><p>也就是说<br>如果是单例页面如vue ,就微信后台后台配置http://xxxx/#/pay/<br>这里就是要求支付必须在2级目录里，paypage.vue得放在pay目录里。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务商下的公众号支付&quot;&gt;&lt;a href=&quot;#服务商下的公众号支付&quot; class=&quot;headerlink&quot; title=&quot;服务商下的公众号支付&quot;&gt;&lt;/a&gt;服务商下的公众号支付&lt;/h1&gt;&lt;p&gt;在服务商模式下，必须传本公众号和用户的openid 给服务商来生成jsapi
      
    
    </summary>
    
      <category term="微信支付" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
      <category term="服务商下" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/%E6%9C%8D%E5%8A%A1%E5%95%86%E4%B8%8B/"/>
    
      <category term="公众号支付" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/%E6%9C%8D%E5%8A%A1%E5%95%86%E4%B8%8B/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="微信支付" scheme="http://dravinbox.github.io/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信网页授权</title>
    <link href="http://dravinbox.github.io/2018/01/18/weixin-auth/"/>
    <id>http://dravinbox.github.io/2018/01/18/weixin-auth/</id>
    <published>2018-01-18T03:15:34.000Z</published>
    <updated>2018-01-18T03:36:09.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h1><p>最近做前后台分离，发现微信授权登陆做的很烦。域名跳来跳去的，跳晕了。<br>微信的网页授权文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">传送门</a></p><p>微信官方给出的步骤:<br>1 第一步：用户同意授权，获取code</p><p>2 第二步：通过code换取网页授权access_token</p><p>3 第三步：刷新access_token（如果需要）</p><p>4 第四步：拉取用户信息(需scope为 snsapi_userinfo)</p><p>5 附：检验授权凭证（access_token）是否有效</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>前端判断用户的cookie为空，并且是微信浏览器，就跳转到长链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=公众号APPID&amp;redirect_uri=后台地址&amp;response_type=code&amp;scope=SCOPE&amp;state=前端拼接的随机字符串#wechat_redirect</span><br></pre></td></tr></table></figure><p>用户的体验是：他打开了前端的一个网页，然后跳转到open.weixin.qq.com的网页，然后又杯重定向到后台的一个地址。最后，后台获取用户信息后，又重定向到前端的某一个页面。</p><p>我门可以思考一个这样的场景，你的朋友分享了一个商城的商品详情页面给你。你打开之后，有了以上的跳转体验，是不是很晕，但是用户用微信浏览器打开的时候是看不到地址的变化，只看到上面有一个绿色的进度条，加载了又加载了…。我们要的效果就是，用户打开这个商品详情页面就静默授权，然后回跳到该页面。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>前端的实现：</p><p>前端在跳转前，使用cookie保存当前的请求的地址ori_path，还要保存一个md5(时间+随机数) 的值md5_str，拼到长链接里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=公众号APPID&amp;redirect_uri=后台地址&amp;response_type=code&amp;scope=SCOPE&amp;state=md5_str#wechat_redirect</span><br></pre></td></tr></table></figure><p>拼好后，跳转！ -》微信官方-》后台-》前端某一个具体的地址/auth</p><p>这时候，前端在/auth的页面里，cookie拿出md5_str,去异步请求后台获取用户数据，再拿出之前存的地址ori_path去跳转。</p><p>后台的实现：</p><p>做一个controller,接受微信官方的请求，微信会带来code 和state (md5_str)<br>拿到code就可以拿到用户信息，具体查看微信公众号文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">传送门</a>,然后，用户数据和state(md5_str)保存起来</p><p>再做一个controller，接受前端发来的md5_str,去拿用户数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信网页授权&quot;&gt;&lt;a href=&quot;#微信网页授权&quot; class=&quot;headerlink&quot; title=&quot;微信网页授权&quot;&gt;&lt;/a&gt;微信网页授权&lt;/h1&gt;&lt;p&gt;最近做前后台分离，发现微信授权登陆做的很烦。域名跳来跳去的，跳晕了。&lt;br&gt;微信的网页授权文档&lt;a href
      
    
    </summary>
    
      <category term="微信公众号" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="网页授权" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    
    
      <category term="微信公众号" scheme="http://dravinbox.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号支付</title>
    <link href="http://dravinbox.github.io/2018/01/18/weixin-mppay/"/>
    <id>http://dravinbox.github.io/2018/01/18/weixin-mppay/</id>
    <published>2018-01-18T03:00:04.000Z</published>
    <updated>2018-01-18T03:14:11.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信公众号支付"><a href="#微信公众号支付" class="headerlink" title="微信公众号支付"></a>微信公众号支付</h1><p>如果是服务商下的公众号发起公众号支付，必须有以下参数<br>用户在子公众号下的openid</p><h2 id="开发者调试的时候找不到子公众号的openid"><a href="#开发者调试的时候找不到子公众号的openid" class="headerlink" title="开发者调试的时候找不到子公众号的openid"></a>开发者调试的时候找不到子公众号的openid</h2><p>1.开发者先关注该服务商下的被服务的公众号（这里叫子公众号）<br>2.在子公众号里的用户管理下，新建一个标签“开发”,把开发人员拉进去<br>3.在<a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">线上调试工具</a>先获取access_token,<br>4.在<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140837" target="_blank" rel="noopener">微信文档-标签</a>,先调用获取公众号已创建的标签，再调用获取标签下粉丝列表<br>5.如果你想查询一下该openid的具体用户信息，请调用<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140839" target="_blank" rel="noopener">微信文档-用户信息</a>里的获取用户基本信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信公众号支付&quot;&gt;&lt;a href=&quot;#微信公众号支付&quot; class=&quot;headerlink&quot; title=&quot;微信公众号支付&quot;&gt;&lt;/a&gt;微信公众号支付&lt;/h1&gt;&lt;p&gt;如果是服务商下的公众号发起公众号支付，必须有以下参数&lt;br&gt;用户在子公众号下的openid&lt;/p&gt;

      
    
    </summary>
    
      <category term="微信支付" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
      <category term="公众号支付" scheme="http://dravinbox.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="微信支付" scheme="http://dravinbox.github.io/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>mysql中delete语句使用别名</title>
    <link href="http://dravinbox.github.io/2018/01/17/mysql-delete/"/>
    <id>http://dravinbox.github.io/2018/01/17/mysql-delete/</id>
    <published>2018-01-17T09:34:49.000Z</published>
    <updated>2018-01-18T03:00:38.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="delete语法中使用别名"><a href="#delete语法中使用别名" class="headerlink" title="delete语法中使用别名"></a>delete语法中使用别名</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> a_table A <span class="keyword">where</span> A.name = <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><p>但是有一个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在delete 与from之间加上一个别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> A <span class="keyword">from</span> a_table A <span class="keyword">where</span> A.name = <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><p>删除成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;delete语法中使用别名&quot;&gt;&lt;a href=&quot;#delete语法中使用别名&quot; class=&quot;headerlink&quot; title=&quot;delete语法中使用别名&quot;&gt;&lt;/a&gt;delete语法中使用别名&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://dravinbox.github.io/categories/mysql/"/>
    
      <category term="delete" scheme="http://dravinbox.github.io/categories/mysql/delete/"/>
    
    
      <category term="mysql" scheme="http://dravinbox.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理tomcat</title>
    <link href="http://dravinbox.github.io/2018/01/16/nginx-proxy/"/>
    <id>http://dravinbox.github.io/2018/01/16/nginx-proxy/</id>
    <published>2018-01-16T09:18:32.000Z</published>
    <updated>2018-01-16T09:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反向代理tomcat并提供web服务"><a href="#反向代理tomcat并提供web服务" class="headerlink" title="反向代理tomcat并提供web服务"></a>反向代理tomcat并提供web服务</h1><h2 id="定义了两个server"><a href="#定义了两个server" class="headerlink" title="定义了两个server"></a>定义了两个server</h2><p>每个server指定一个域名<br>dev.mall.com指向一个web应用<br>api.mall.com反向代理到8080端口tomcat上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name dev.mall.com;</span><br><span class="line">    access_log  /www/wwwlogs/mall-acess_log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /www/wwwroot/mall;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name api.mall.com;</span><br><span class="line">    access_log  /www/wwwlogs/mall-api-acess_log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080; </span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_connect_timeout 300;</span><br><span class="line">        proxy_redirect     off;</span><br><span class="line"></span><br><span class="line">        proxy_set_header   Host    $host; </span><br><span class="line">        proxy_set_header   X-Real-IP   $remote_addr; </span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反向代理tomcat并提供web服务&quot;&gt;&lt;a href=&quot;#反向代理tomcat并提供web服务&quot; class=&quot;headerlink&quot; title=&quot;反向代理tomcat并提供web服务&quot;&gt;&lt;/a&gt;反向代理tomcat并提供web服务&lt;/h1&gt;&lt;h2 id=&quot;定
      
    
    </summary>
    
      <category term="nginx" scheme="http://dravinbox.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://dravinbox.github.io/tags/nginx/"/>
    
      <category term="tomcat" scheme="http://dravinbox.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>maven nexus 私库配置</title>
    <link href="http://dravinbox.github.io/2018/01/15/maven-nexus/"/>
    <id>http://dravinbox.github.io/2018/01/15/maven-nexus/</id>
    <published>2018-01-15T08:19:21.000Z</published>
    <updated>2018-01-16T09:24:19.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nexus的配置"><a href="#nexus的配置" class="headerlink" title="nexus的配置"></a>nexus的配置</h1><p>使用docker 安装nexus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 32770:8081 --name nexus sonatype/nexus</span><br></pre></td></tr></table></figure><p>1.访问<a href="http://localhost:32770/nexus" target="_blank" rel="noopener">http://localhost:32770/nexus</a><br>2.在<servers>节点增加一个用户</servers></p><figure class="highlight xml"><figcaption><span>setting.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>rrg<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>rrg<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>rrg88888<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改central为阿里云的代理<br>4.修改setting文件，包括mirro 和profile</p><figure class="highlight xml"><figcaption><span>setting.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mirrors节点添加如下：--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>local-nexus3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>local maven3<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:32770/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--profiles节点添加如下：--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>local-maven-main-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:32770/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>local-maven-plugin-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:32770/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最后激活 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.发布与部署<br>6.使用<br>7.发布第3方包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nexus的配置&quot;&gt;&lt;a href=&quot;#nexus的配置&quot; class=&quot;headerlink&quot; title=&quot;nexus的配置&quot;&gt;&lt;/a&gt;nexus的配置&lt;/h1&gt;&lt;p&gt;使用docker 安装nexus&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="maven" scheme="http://dravinbox.github.io/categories/maven/"/>
    
      <category term="nexus" scheme="http://dravinbox.github.io/categories/maven/nexus/"/>
    
    
      <category term="maven" scheme="http://dravinbox.github.io/tags/maven/"/>
    
      <category term="nexus" scheme="http://dravinbox.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>docker-gui</title>
    <link href="http://dravinbox.github.io/2017/12/25/docker-gui/"/>
    <id>http://dravinbox.github.io/2017/12/25/docker-gui/</id>
    <published>2017-12-25T01:39:33.000Z</published>
    <updated>2017-12-25T03:08:08.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Mac上使用Docker运行GUI应用程序"><a href="#在Mac上使用Docker运行GUI应用程序" class="headerlink" title="在Mac上使用Docker运行GUI应用程序"></a>在Mac上使用Docker运行GUI应用程序</h1><p>firefox<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmsrqtspn3j31kw0wl75f.jpg" alt=""><br>vscode<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmstzu8y5xj31kw17wdgx.jpg" alt=""></p><p>需要准备的东西：</p><ul><li>osx系统</li><li>docker for mac</li><li>XQartz 2.7.11</li><li>一位国外的美女大神写的Dockerfile</li></ul><h2 id="osx系统没有就不用看下去"><a href="#osx系统没有就不用看下去" class="headerlink" title="osx系统没有就不用看下去"></a>osx系统没有就不用看下去</h2><h2 id="docker-for-mac-自行安装"><a href="#docker-for-mac-自行安装" class="headerlink" title="docker for mac 自行安装"></a>docker for mac 自行安装</h2><h2 id="XQuartz"><a href="#XQuartz" class="headerlink" title="XQuartz"></a>XQuartz</h2><p>使用brew 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install xquartz</span><br></pre></td></tr></table></figure><p>关于Quartz的最新版，可以前往<a href="https://www.xquartz.org/releases/index.html" target="_blank" rel="noopener">XQuartz官网</a></p><h2 id="运行起来！"><a href="#运行起来！" class="headerlink" title="运行起来！"></a>运行起来！</h2><p>使用我们本机的终端来打开XQuartz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a XQuartz</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fmss1a25xrj30qo0js0sp.jpg" alt=""></p><p>我们就运行起来了xquartz的终端，我们打开它的偏好设置</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmss2e5fj6j30qw0k674y.jpg" alt=""></p><p>把这个钩上，然后重启XQuartz就生效。</p><p>我们在XQuartz的终端输入一下命令,来允许你本机的连接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip=$(ifconfig en0 | grep inet | awk <span class="string">'$1=="inet" &#123;print $2&#125;'</span>)</span><br><span class="line">xhost + <span class="variable">$ip</span></span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmss6q865ej30qs0jq74b.jpg" alt=""></p><p>设置好之后，我们就可以运行一下Jessie大神做的Firefox镜像，她写的dockerfile<a href="https://github.com/jessfraz/dockerfiles/tree/master/firefox" target="_blank" rel="noopener">在这</a></p><p>firefox:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name firefox -e DISPLAY=<span class="variable">$ip</span>:0 -v /tmp/.X11-unix:/tmp/.X11-unix jess/firefox</span><br></pre></td></tr></table></figure><p>vscode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /etc/localtime:/etc/localtime:ro -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=<span class="variable">$ip</span>:0 --name vscode jess/vscode</span><br></pre></td></tr></table></figure><p>chrome(记得加上–privileged):<br>因为Chrome使用的是沙盒，因此运行一个没权限的沙盒将等到一个错误：<br>Failed to move to new namespace: PID namespaces supported, Network namespace supported, but failed: errno = Operation not permitted<br>使用<code>--privileged</code>可以给容器赋予权限去访问主机的资源，就如主机的进程那样访问主机的资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=<span class="variable">$ip</span>:0 -v ~/Downloads:/root/Downloads --privileged --name chrome jess/chrome</span><br></pre></td></tr></table></figure><h2 id="Merry-Christmas"><a href="#Merry-Christmas" class="headerlink" title="Merry Christmas"></a>Merry Christmas</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmssiaps7wg30dw0dwwml.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Mac上使用Docker运行GUI应用程序&quot;&gt;&lt;a href=&quot;#在Mac上使用Docker运行GUI应用程序&quot; class=&quot;headerlink&quot; title=&quot;在Mac上使用Docker运行GUI应用程序&quot;&gt;&lt;/a&gt;在Mac上使用Docker运行GUI应用
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="部署例子" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/"/>
    
      <category term="运行GUI应用程序" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/%E8%BF%90%E8%A1%8CGUI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
      <category term="GUI" scheme="http://dravinbox.github.io/tags/GUI/"/>
    
      <category term="FireFox" scheme="http://dravinbox.github.io/tags/FireFox/"/>
    
      <category term="VSCode" scheme="http://dravinbox.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>在docker里运行Jenkins</title>
    <link href="http://dravinbox.github.io/2017/12/23/docker-jenkins/"/>
    <id>http://dravinbox.github.io/2017/12/23/docker-jenkins/</id>
    <published>2017-12-23T09:22:32.000Z</published>
    <updated>2017-12-25T02:13:12.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意/your/home 替换成你创建的目录，保证容器有访问权限</span></span><br><span class="line">docker run -d -p 12821:8080 -p 50000:50000 -v /your/home:/var/jenkins_home  --name jenkins jenkins/jenkins</span><br><span class="line">5cc5e09fdea5e9296bd26095b90f770b0d05213d80299d44dd3984db14bdbd85</span><br></pre></td></tr></table></figure><p>然后登陆到容器里获取初始化密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  5cc5e09fdea5  bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用cat 命令查看密码</span></span><br><span class="line">jenkins@5cc5e09fdea5:/$ cat  /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后出来这个密码</span></span><br><span class="line">44fcdb88xxxxxxxxxxx6a2d00c2d</span><br></pre></td></tr></table></figure><p>把上面的密码复制到浏览器里<a href="http://localhost:12821" target="_blank" rel="noopener">http://localhost:12821</a> 里需要密码的地方:</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fmqurvobr7j30wg0judgi.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fmqusk4makj30wn0hmq2u.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fmquthb410j30yp0kc751.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jenkins&quot;&gt;&lt;a href=&quot;#Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Jenkins&quot;&gt;&lt;/a&gt;Jenkins&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="部署例子" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/"/>
    
      <category term="Jenkins" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/Jenkins/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://dravinbox.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门-part5-Stacks</title>
    <link href="http://dravinbox.github.io/2017/12/22/docker-part5/"/>
    <id>http://dravinbox.github.io/2017/12/22/docker-part5/</id>
    <published>2017-12-22T03:04:34.000Z</published>
    <updated>2017-12-23T01:23:09.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本Docker入门系列文章是翻译于Docker官方getStarted文档,如有出入，请跳转查看<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">官方文档</a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote><p>A stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together. </p></blockquote><p>可以理解一个堆里有多个服务，服务之间相互协作。有一些复杂的应用，它可能需要多个堆。</p><h2 id="添加一个新的服务并且部署它"><a href="#添加一个新的服务并且部署它" class="headerlink" title="添加一个新的服务并且部署它"></a>添加一个新的服务并且部署它</h2><p>1.我们打开之前的<code>docker-compose.yml</code>文件，使用下面的代码覆盖它。记得替换那里<code>username/repo:tag</code> 对应的远程库镜像值。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  visualizer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><p>我们可以看到上面的代码里，多了一个服务：visualizer。并且看到一个新的关键字<code>volumes</code> ,它给visualizer容器权限，能访问宿主机的socket文件。还有一个新的关键字<code>placement</code>,定义这个服务只能在swarm manager上运行，不能在worker上。因为这个容器是用来展示Docker的各种服务在一个图表里，它由Docker开发的并且开源。</p><p>2.设置你的shell连接上myvm1 ，上部分已经讲过：</p><ul><li>docker-machine ls</li><li>docker-machine env myvm1</li><li>eval $(docker-machine env myvm1)</li></ul><p>3.在manager节点上再次运行<code>docker stack deploy</code>,如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><p>4.我们来看看visualizer<br>先使用<code>docker-machine ls</code>查看各个节点的ip,然后你用浏览访问任何一个ip的8080端口，就可以看到图像化界面，显示各种服务在不同的机器上运行。</p><p>我们可以看到,visualizer只运行在manager节点上。 可以使用<code>docker stack ps getstartedlab</code>查看该堆所有服务的任务。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmpozwsezyg30j20cux6p.gif" alt=""></p><h2 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h2><p>让我们添加一个Redis 数据库 用来存储数据</p><p>1.我们打开之前的<code>docker-compose.yml</code>文件，使用下面的代码覆盖它。记得替换那里<code>username/repo:tag</code> 对应的远程库镜像值。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  visualizer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"6379:6379"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/docker/data:/data</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="bullet">--appendonly</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><p>2.在manager机器上（即myvm1）,创建一个目录：<code>./data</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh myvm1 <span class="string">"mkdir ./data"</span></span><br></pre></td></tr></table></figure><p>这里注意几点:</p><ul><li>redis 的远程镜像就是很短：”redis”,不用质疑</li><li>redis容器对外服务端口依然是6379,方便其他服务获取。</li><li>redis的volumes 的/home/docker/data目录是myvm1的目录，因为下面定义了它只能部署在manager上，所以我们使用<code>docker-machine ssh myvm1 &quot;mkdir ./data&quot;</code> 创建一个/home/docker/data目录。然后冒号后边的/data是redis容器里的路径，这里是redis的工作路径，我们不用管。</li></ul><p>3.保证你的shell连接上myvm1 ,前面讲过</p><p>4.重新部署,再次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><p>5.查看服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p>6.访问你的一个节点机器 <a href="http://192.168.99.101" target="_blank" rel="noopener">http://192.168.99.101</a> ,我们可以看到Visits在递增，那是因为我们的数据存在Redis上了。我们继续看看<a href="http://192.168.99.101:8080" target="_blank" rel="noopener">http://192.168.99.101:8080</a></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fmqfwsmkprg30j20cu1kz.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Stacks&quot;&gt;&lt;a href=&quot;#Stacks&quot; class=&quot;headerlink&quot; title=&quot;Stacks&quot;&gt;&lt;/a&gt;Stacks&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="Docker入门" scheme="http://dravinbox.github.io/categories/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门-part4-Swarms</title>
    <link href="http://dravinbox.github.io/2017/12/22/docker-part4/"/>
    <id>http://dravinbox.github.io/2017/12/22/docker-part4/</id>
    <published>2017-12-22T02:58:51.000Z</published>
    <updated>2017-12-22T09:26:40.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swarms"><a href="#Swarms" class="headerlink" title="Swarms"></a>Swarms</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本Docker入门系列文章是翻译于Docker官方getStarted文档,如有出入，请跳转查看<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">官方文档</a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote><p>Here in part 4, you deploy this application onto a cluster, running it on multiple machines. Multi-container, multi-machine applications are made possible by joining multiple machines into a “Dockerized” cluster called a swarm.</p></blockquote><p>可以理解swarm 是一个种多宿主机器，多容器组成的机器群体。</p><p>你可以通过 Swarm manager来控制这种多容器，多机器组成的集群。这里的机器可以是真实的也可以是虚拟的。一旦加入了swarm ，就称为一个节点node。</p><h2 id="建立你的swarm"><a href="#建立你的swarm" class="headerlink" title="建立你的swarm"></a>建立你的swarm</h2><p>在你的机器上执行<code>docker swarm init</code>去启动swarm 模式，且成为swarm manager。使用其他的机器执行<code>docker swarm join</code>加入刚刚的swarm 群里成为worker。<br>这里 我们使用虚拟机模拟一个由两台机器组成的集群。</p><h3 id="创建cluster"><a href="#创建cluster" class="headerlink" title="创建cluster"></a>创建cluster</h3><blockquote><p>MAC, LINUX</p></blockquote><p>先在宿主机上安装<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox</a></p><p>使用<code>docker-machine</code> 命令，和VirtualBox的驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --driver virtualbox myvm1</span><br><span class="line">docker-machine create --driver virtualbox myvm2</span><br></pre></td></tr></table></figure><p><strong>使用以下命令获得机器列表和他们的ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span>-machine ls</span><br><span class="line"></span><br><span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.11.0-ce   </span><br><span class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.11.0-ce</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpnhpa9i6g30j20cuatr.gif" alt=""></p><p><strong>初始化swarm 和添加节点</strong></p><p>我们让myvm1成为manger,myvm2成为worker<br>可以使用<code>docker-machine ssh</code>向 myvm1 发送<code>docker swarm init</code>命令<br>格式是<code>docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr &lt;myvm1 ip&gt;&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> $ docker-machine ssh myvm1 <span class="string">"docker swarm init --advertise-addr 192.168.99.100"</span></span><br><span class="line">Swarm initialized: current node (qkxdnhw56ibpdwqt22jpvxtj6) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-547x8uwxy9kjkf31c46q9bx74jb92v16y2ruoo6aabvv5rhq1r-36qjytbfe7i3dxu8tdp9fyfnr 192.168.99.100:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p>同样地，我们向myvm2发送命令加入swarm,格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh myvm2 <span class="string">"docker swarm join \</span></span><br><span class="line"><span class="string">--token &lt;token&gt; \</span></span><br><span class="line"><span class="string">&lt;ip&gt;:2377"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm2 <span class="string">"docker swarm join --token SWMTKN-1-547x8uwxy9kjkf31c46q9bx74jb92v16y2ruoo6aabvv5rhq1r-36qjytbfe7i3dxu8tdp9fyfnr 192.168.99.100:2377"</span></span><br><span class="line"></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p>恭喜，你成功建立你的第一个swarm<br>执行<code>docker node ls</code> 查看你的swarm中的各种节点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker node ls"</span></span><br><span class="line"></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</span><br><span class="line">qkxdnhw56ibpdwqt22jpvxtj6 *   myvm1               Ready               Active              Leader</span><br><span class="line">plax8po1p26hs67f693yqm5c7     myvm2               Ready               Active</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fmpnre3z2dg30j20cu7q6.gif" alt=""></p><h2 id="在你的swarm-集群部署你的APP"><a href="#在你的swarm-集群部署你的APP" class="headerlink" title="在你的swarm 集群部署你的APP"></a>在你的swarm 集群部署你的APP</h2><p>上面艰难的步骤已经完了，接下来就简单了，重复Part3的步骤来部署在你新的swarm上，你只要记住，你的myvm1是管理者，只用来执行命令的，worker节点只是容纳过来的。他们都可以工作。</p><h3 id="配置你的shell给swarm-manager（可以理解为登陆到某个节点，不需要每次都docker-machine-ssh）"><a href="#配置你的shell给swarm-manager（可以理解为登陆到某个节点，不需要每次都docker-machine-ssh）" class="headerlink" title="配置你的shell给swarm manager（可以理解为登陆到某个节点，不需要每次都docker-machine ssh）"></a>配置你的shell给swarm manager（可以理解为登陆到某个节点，不需要每次都docker-machine ssh）</h3><blockquote><p>这里提供mac / Linux的方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine env myvm1</span><br><span class="line"><span class="built_in">export</span> DOCKER_TLS_VERIFY=<span class="string">"1"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_HOST=<span class="string">"tcp://192.168.99.100:2376"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_CERT_PATH=<span class="string">"/Users/sam/.docker/machine/machines/myvm1"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_MACHINE_NAME=<span class="string">"myvm1"</span></span><br><span class="line"><span class="comment"># Run this command to configure your shell:</span></span><br><span class="line"><span class="comment"># eval $(docker-machine env myvm1)</span></span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(docker-machine env myvm1)</span><br></pre></td></tr></table></figure><p>现在你的shell已经登陆到myvm1上了，可以使用docker-machine ls 查看myvm1 的ACTIVE端是不是有个*号，表示你的shell登陆上这台机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.11.0-ce   </span><br><span class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.11.0-ce</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmpnuvqzz4g30j20cuwqx.gif" alt=""></p><h3 id="在swarm-manager机器上部署你的APP"><a href="#在swarm-manager机器上部署你的APP" class="headerlink" title="在swarm manager机器上部署你的APP"></a>在swarm manager机器上部署你的APP</h3><p>虽然你现在的shell已经登陆上myvm1 了，但是还是可以访问本机的文件，这里我们部署app就需要之前写的docker-compose.yml文件。我们使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><p>我们成功部署了APP，在这个集群上。使用以下查看详细的部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack ps getstartedlab</span><br><span class="line"></span><br><span class="line">ID                  NAME                  IMAGE                         NODE                DESIRED STATE       CURRENT STATE              ERROR               PORTS</span><br><span class="line">l546oo0pmewz        getstartedlab_web.1   dk5664280/get-started:part2   myvm1               Running             Preparing 25 seconds ago                       </span><br><span class="line">vdym3ibcbhku        getstartedlab_web.2   dk5664280/get-started:part2   myvm2               Running             Preparing 25 seconds ago                       </span><br><span class="line">x4gx5wzj7pp6        getstartedlab_web.3   dk5664280/get-started:part2   myvm2               Running             Preparing 25 seconds ago                       </span><br><span class="line">imw4urn7oo9d        getstartedlab_web.4   dk5664280/get-started:part2   myvm1               Running             Preparing 26 seconds ago                       </span><br><span class="line">ios5s8yejbhj        getstartedlab_web.5   dk5664280/get-started:part2   myvm2               Running             Preparing 25 seconds ago                       </span><br><span class="line">vhkwaz09n4q8        getstartedlab_web.6   dk5664280/get-started:part2   myvm1               Running             Preparing 25 seconds ago                       </span><br><span class="line">qybf5fd0ueij        getstartedlab_web.7   dk5664280/get-started:part2   myvm2               Running             Preparing 25 seconds ago</span><br></pre></td></tr></table></figure><p>看到了，我们的app在补同的机器myvm1和myvm2上部署，它们组成了一个集群.</p><h3 id="访问我们的集群"><a href="#访问我们的集群" class="headerlink" title="访问我们的集群"></a>访问我们的集群</h3><p>你可以访问myvm1或myvm2,例如 <a href="http://192.168.99.100:4000或http://192.168.99.101:4000" target="_blank" rel="noopener">http://192.168.99.100:4000或http://192.168.99.101:4000</a> ,你都可以得到返回结果，并且每次结果不一样，因为它们使用了swarm的一个负载均衡器。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fmpo3ufw12g30j20cu4qp.gif" alt=""></p><h3 id="重新调配你的app"><a href="#重新调配你的app" class="headerlink" title="重新调配你的app"></a>重新调配你的app</h3><p>你可以修改你的docker-compose.yml,然后再运行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><h2 id="清除和重启"><a href="#清除和重启" class="headerlink" title="清除和重启"></a>清除和重启</h2><h3 id="stacks-和swarms"><a href="#stacks-和swarms" class="headerlink" title="stacks 和swarms"></a>stacks 和swarms</h3><p>清除 stacks:<br><code>docker stack rm getstartedlab</code></p><p>我们先不敢掉swarms,因为下一个Part 5,我们还用先保留以下。</p><blockquote><p>如果你真想敢掉swarms,执行<code>docker-machine ssh myvm2 &quot;docker swarm leave</code>这样能使work机里开该swarm集群，<code>docker-machine ssh myvm1 &quot;docker swarm leave --force</code> 能使manager离开swarm </p></blockquote><h3 id="关掉所有机器"><a href="#关掉所有机器" class="headerlink" title="关掉所有机器"></a>关掉所有机器</h3><p>执行下面的命令停止所有的机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span>-machine stop $(docker-machine ls -q)</span><br></pre></td></tr></table></figure><h3 id="清除shell配置"><a href="#清除shell配置" class="headerlink" title="清除shell配置"></a>清除shell配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(docker-machine env -u)</span><br></pre></td></tr></table></figure><p>这样就可以中断连接虚拟机了。<br>可以使用<code>docker-machine ls</code>查看，已经没有ACTIVE的机器了。</p><h3 id="启动机器"><a href="#启动机器" class="headerlink" title="启动机器"></a>启动机器</h3><p>使用下面的代码启动机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine start &lt;machine-name&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmpo8sy0y1g30j20cu1bv.gif" alt=""></p><blockquote><p>socker是我打错了，ctrl+c 中断了该命令</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --driver virtualbox myvm1 <span class="comment"># Create a VM (Mac, Win7, Linux)</span></span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm1 <span class="comment"># Win10</span></span><br><span class="line">docker-machine env myvm1                <span class="comment"># View basic information about your node</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node ls"</span>         <span class="comment"># List the nodes in your swarm</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node inspect &lt;node ID&gt;"</span>        <span class="comment"># Inspect a node</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm join-token -q worker"</span>   <span class="comment"># View join token</span></span><br><span class="line">docker-machine ssh myvm1   <span class="comment"># Open an SSH session with the VM; type "exit" to end</span></span><br><span class="line">docker node ls                <span class="comment"># View nodes in swarm (while logged on to manager)</span></span><br><span class="line">docker-machine ssh myvm2 <span class="string">"docker swarm leave"</span>  <span class="comment"># Make the worker leave the swarm</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm leave -f"</span> <span class="comment"># Make master leave, kill swarm</span></span><br><span class="line">docker-machine ls <span class="comment"># list VMs, asterisk shows which VM this shell is talking to</span></span><br><span class="line">docker-machine start myvm1            <span class="comment"># Start a VM that is currently not running</span></span><br><span class="line">docker-machine env myvm1      <span class="comment"># show environment variables and command for myvm1</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine env myvm1)         <span class="comment"># Mac command to connect shell to myvm1</span></span><br><span class="line">&amp; <span class="string">"C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe"</span> env myvm1 | Invoke-Expression   <span class="comment"># Windows command to connect shell to myvm1</span></span><br><span class="line">docker stack deploy -c &lt;file&gt; &lt;app&gt;  <span class="comment"># Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file</span></span><br><span class="line">docker-machine scp docker-compose.yml myvm1:~ <span class="comment"># Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker stack deploy -c &lt;file&gt; &lt;app&gt;"</span>   <span class="comment"># Deploy an app using ssh (you must have first copied the Compose file to myvm1)</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine env -u)     <span class="comment"># Disconnect shell from VMs, use native docker</span></span><br><span class="line">docker-machine stop $(docker-machine ls -q)               <span class="comment"># Stop all running VMs</span></span><br><span class="line">docker-machine rm $(docker-machine ls -q) <span class="comment"># Delete all VMs and their disk images</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swarms&quot;&gt;&lt;a href=&quot;#Swarms&quot; class=&quot;headerlink&quot; title=&quot;Swarms&quot;&gt;&lt;/a&gt;Swarms&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="Docker入门" scheme="http://dravinbox.github.io/categories/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门-part3-Services</title>
    <link href="http://dravinbox.github.io/2017/12/22/docker-part3/"/>
    <id>http://dravinbox.github.io/2017/12/22/docker-part3/</id>
    <published>2017-12-22T02:50:56.000Z</published>
    <updated>2017-12-22T07:56:40.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于服务-About-services"><a href="#关于服务-About-services" class="headerlink" title="关于服务 About services"></a>关于服务 About services</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本Docker入门系列文章是翻译于Docker官方getStarted文档,如有出入，请跳转查看<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">官方文档</a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote><p>In a distributed application, different pieces of the app are called “services.” For example, if you imagine a video sharing site, it probably includes a service for storing application data in a database, a service for video transcoding in the background after a user uploads something, a service for the front-end, and so on.<br>Services are really just “containers in production.” A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.<br>Luckily it’s very easy to define, run, and scale services with the Docker platform – just write a <code>docker-compose.yml</code> file.</p></blockquote><p>可以理解为，服务包含多个容器。一个服务通过docker-compose.yml创建，里面定义了多个容器的行为，资源消耗等问题。</p><h2 id="编写你的-docker-compose-yml-文件"><a href="#编写你的-docker-compose-yml-文件" class="headerlink" title="编写你的 docker-compose.yml 文件"></a>编写你的 docker-compose.yml 文件</h2><p>这个文件定义了容器的行为</p><h3 id="docker-compose-yml文件"><a href="#docker-compose-yml文件" class="headerlink" title="docker-compose.yml文件"></a>docker-compose.yml文件</h3><p>在你喜欢的目录下，创建 一个文件叫docker-compose.yml，使用你之前在Part 2推送的镜像，更新一下下面中username/repo:tag 的位置代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment">#使用之前你推送的镜像路径 替代这里的 username/repo:tag </span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"4000:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><h3 id="文件解释"><a href="#文件解释" class="headerlink" title="文件解释"></a>文件解释</h3><p>这个文件告诉docker 去做以下的事：</p><ul><li>拉取远程镜像</li><li>运行5个容器作为一个服务，命名为<code>web</code>;限制每一个的资源：最多10%CPU的使用和50MB内存</li><li>如果有一个容器宕机，立马重启它这个容器</li><li>映射宿主机的4000端口到<code>web</code>该服务的80端口</li><li>这里面的5个容器通过负载均衡网络<code>webnet</code>共享80端口</li><li>定义一个默认配置的网络<code>webnet</code>，它是一个负载均衡的网络(load-balanced overlay network)</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmpkesyoytg30j20cutwa.gif" alt=""></p><h2 id="运行你的负载均衡APP"><a href="#运行你的负载均衡APP" class="headerlink" title="运行你的负载均衡APP"></a>运行你的负载均衡APP</h2><p>在我们使用<code>docker stack deploy</code>前先执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果你不运行<code>docker swarm init</code>你将得到一个错误：“this node is not a swarm manager”</p></blockquote><p>运行 以上命令后，使用一下命令给你的负载均衡APP命名，这里名为getstartedlab :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><blockquote><p>如果你运行起来有***.***.*** must be a mapping 就说明的你yml配置文件格式不对</p></blockquote><p>好了，我们来看看这个服务是不是有5个容器在运行，使用以下命令查看服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p>我们可以看到服务name 是getstartedlab_web ，就是APP名__服务名的结合。<br>这里服务中的每一个容器称为<strong>任务(Task)</strong>，这些任务都分配着唯一的ID，查看该服务的详细任务列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps getstartedlab_web</span><br></pre></td></tr></table></figure><p>以上 看到服务里各个任务id，当然容器对于外部系统来说，也有容器id:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -q</span><br></pre></td></tr></table></figure><p>现在你可以使用<code>curl -4 http://localhost:4000</code>多次执行，或多次浏览该URL，你会发现所有不同，他们真的负载均衡了。你可以看到变得是容器ID,就是上面<code>docker containter ls -q</code>的结果之一。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpl5et388g30j20cuhdt.gif" alt=""></p><h2 id="调控你的APP"><a href="#调控你的APP" class="headerlink" title="调控你的APP"></a>调控你的APP</h2><p>你可以修改docker-compose.yml里的replicas的值，然后保存，再次执行：<br>修改前我查看一下容器id列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> container ls -q</span><br><span class="line">6e64e2240278</span><br><span class="line">3ccbef3e8459</span><br><span class="line">985e1fec1482</span><br><span class="line">8c7dbe7aad8d</span><br><span class="line">6633801d7557</span><br></pre></td></tr></table></figure><p>这里我修改replicas为7，然后保存，再次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><p>再查看容器id列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> container ls -q</span><br><span class="line">cc9987a174f1</span><br><span class="line">e4b0337fed8d</span><br><span class="line">6e64e2240278</span><br><span class="line">3ccbef3e8459</span><br><span class="line">985e1fec1482</span><br><span class="line">8c7dbe7aad8d</span><br><span class="line">6633801d7557</span><br></pre></td></tr></table></figure><p>发现它保留了原来的容器，并增加两个新的容器：cc9987a174f1和e4b0337fed8d，说明调控任务数量时，它不会把原来的全部容器杀死，而是一种更新。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmplmbl6ekg30j20cu1kx.gif" alt=""></p><h2 id="关闭你的app和关闭swarm"><a href="#关闭你的app和关闭swarm" class="headerlink" title="关闭你的app和关闭swarm"></a>关闭你的app和关闭swarm</h2><p>关闭app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm getstartedlab</span><br></pre></td></tr></table></figure><p>关闭swarm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmplnwmw78g30j20cuqad.gif" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stack ls                                            <span class="comment"># List stacks or apps</span></span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class="comment"># Run the specified Compose file</span></span><br><span class="line">docker service ls                 <span class="comment"># List running services associated with an app</span></span><br><span class="line">docker service ps &lt;service&gt;                  <span class="comment"># List tasks associated with an app</span></span><br><span class="line">docker inspect &lt;task or container&gt;                   <span class="comment"># Inspect task or container</span></span><br><span class="line">docker container ls -q                                      <span class="comment"># List container IDs</span></span><br><span class="line">docker stack rm &lt;appname&gt;                             <span class="comment"># Tear down an application</span></span><br><span class="line">docker swarm leave --force      <span class="comment"># Take down a single node swarm from the manager</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于服务-About-services&quot;&gt;&lt;a href=&quot;#关于服务-About-services&quot; class=&quot;headerlink&quot; title=&quot;关于服务 About services&quot;&gt;&lt;/a&gt;关于服务 About services&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="Docker入门" scheme="http://dravinbox.github.io/categories/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门-part2-Containers</title>
    <link href="http://dravinbox.github.io/2017/12/22/docker-part2/"/>
    <id>http://dravinbox.github.io/2017/12/22/docker-part2/</id>
    <published>2017-12-22T02:43:41.000Z</published>
    <updated>2017-12-22T06:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器Containers"><a href="#容器Containers" class="headerlink" title="容器Containers"></a>容器Containers</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本Docker入门系列文章是翻译于Docker官方getStarted文档,如有出入，请跳转查看<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">官方文档</a></p><h2 id="定义Dockerfile文件"><a href="#定义Dockerfile文件" class="headerlink" title="定义Dockerfile文件"></a>定义Dockerfile文件</h2><p>新建一个空目录，cd进去，然后新建一个文件叫Dockerfile<br>拷贝下面的内容进去。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use an official Python runtime as a parent image</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the working directory to /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Copy the current directory contents into the container at /app</span></span></span><br><span class="line"><span class="bash">ADD . /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Install any needed packages specified in requirements.txt</span></span></span><br><span class="line"><span class="bash">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Make port 80 available to the world outside this container</span></span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Define environment variable</span></span></span><br><span class="line"><span class="bash">ENV NAME World</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Run app.py when the container launches</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpgj5ou6pg30j20cuqa6.gif" alt=""></p><h3 id="the-app-itself"><a href="#the-app-itself" class="headerlink" title="the app itself"></a>the app itself</h3><p>再拷贝两个文件，requirements.txt和app.py。把他们放到Dockerfile的相同目录里。这样Dockerfile就可以“ADD . /app” 把他们两个文件放进image镜象里。</p><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis, RedisError</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Redis</span></span><br><span class="line">redis = Redis(host=<span class="string">"redis"</span>, db=<span class="number">0</span>, socket_connect_timeout=<span class="number">2</span>, socket_timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        visits = redis.incr(<span class="string">"counter"</span>)</span><br><span class="line">    <span class="keyword">except</span> RedisError:</span><br><span class="line">        visits = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></span><br><span class="line"></span><br><span class="line">    html = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></span><br><span class="line">    <span class="keyword">return</span> html.format(name=os.getenv(<span class="string">"NAME"</span>, <span class="string">"world"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmpgmn0fahg30j20cu47r.gif" alt=""></p><p>我们就看到刚刚的”pip install -r requirements.txt”,就是读取requirements.txt里的文件，安装Flask和Redis的库文件给Python。我们设置的环境变量NAME 为World ,那么代码里的socket.gethostname()就可以获取World。</p><h2 id="建立我们的APP"><a href="#建立我们的APP" class="headerlink" title="建立我们的APP"></a>建立我们的APP</h2><p>我们先看看我们现有的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Dockerfileapp.pyrequirements.txt</span><br></pre></td></tr></table></figure><p>创建一个镜像，使用 <code>-t</code>  为它名一个友善的名字friendlyhello:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure><blockquote><p>你可以使用<code>docker images</code> 或<code>docker image ls</code>查看镜像列表</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpgraiu5yg30j20cukjl.gif" alt=""></p><h2 id="运行我们的APP"><a href="#运行我们的APP" class="headerlink" title="运行我们的APP"></a>运行我们的APP</h2><p>使用<code>-p</code>去映射宿主机的4000端口到容器的80端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><p>去打开我们的浏览器浏览<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><blockquote><p>如果你使用的是Window 7 的Docker Toolbox ，请求不是localhost,而是<a href="http://192.168.99.100:4000。如果还不是，使用docker-machine" target="_blank" rel="noopener">http://192.168.99.100:4000。如果还不是，使用docker-machine</a> ip 查看具体的Docker Machine IP</p></blockquote><p>你也可以使用curl命令发起请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:4000</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;Hello World!&lt;/h3&gt;&lt;b&gt;Hostname:&lt;/b&gt; 8fc990912a14&lt;br/&gt;&lt;b&gt;Visits:&lt;/b&gt; &lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>使用Ctrl+C 退出以上的正在运行的容器</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmph39yud6g30j20cunes.gif" alt=""></p><blockquote><p>对于Window系统，可能Ctrl+C并不能完全退出，只是简单退出运行的页面，还得<code>docker container ls</code>查看正在运行的容器，接着就<code>docker container stop &lt;Container NAME or ID&gt;</code>来停止该容器</p></blockquote><p>现在呢，我们来让容器在后台运行,使用<code>-d</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><p>你就会得到一个很长的容器ID,这个容器已经在后台运行了，我们可以使用<code>docker container ls</code>来查看正在运行的容器。同时我们可以访问<a href="http://localhsot:4000。现在我们可以关闭该容器：" target="_blank" rel="noopener">http://localhsot:4000。现在我们可以关闭该容器：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop bb1dd75f205d</span><br></pre></td></tr></table></figure><h2 id="分享你的镜像"><a href="#分享你的镜像" class="headerlink" title="分享你的镜像"></a>分享你的镜像</h2><h3 id="使用Docker账号登录"><a href="#使用Docker账号登录" class="headerlink" title="使用Docker账号登录"></a>使用Docker账号登录</h3><p>如果你还没有账号，请在<a href="http://cloud.docker.com" target="_blank" rel="noopener">cloud.docker.com</a>注册。注册好后，在命令行登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> login</span><br></pre></td></tr></table></figure><h3 id="为你的镜像打上标签Tag"><a href="#为你的镜像打上标签Tag" class="headerlink" title="为你的镜像打上标签Tag"></a>为你的镜像打上标签Tag</h3><p>具体的语法：<code>docker tag image username/repository:tag</code></p><ul><li>image：哪一个镜像名；</li><li>username:用户名（一定要对上你的账户名）；</li><li>repository:库名； </li><li>tag ：版本号</li></ul><p>例如：docker tag friendlyhello john/get-started:part2</p><h3 id="发布你的镜像"><a href="#发布你的镜像" class="headerlink" title="发布你的镜像"></a>发布你的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push username/repository:tag</span><br></pre></td></tr></table></figure><p>等一上传完后，可以登录<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>，去查看你新分享的镜像。</p><h3 id="拉取远程镜像并且运行它"><a href="#拉取远程镜像并且运行它" class="headerlink" title="拉取远程镜像并且运行它"></a>拉取远程镜像并且运行它</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 username/repository:tag</span><br></pre></td></tr></table></figure><p>如果你本地没有这个镜像它会去远程拉取，否则运行本地的镜像。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpj70p1mjg30j20cuh9v.gif" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyname .  <span class="comment"># 使用Dockerfile 创建一个镜像，并使用-t为镜像命名，注意别漏了最后那一点"."，它表示Dockerfile的当前目录。</span></span><br><span class="line">docker run -p 4000:80 friendlyname  <span class="comment"># 使用-p 映射宿主机的端口4000到容器的80端口，运行镜像</span></span><br><span class="line">docker run -d -p 4000:80 friendlyname         <span class="comment">#使用后台运行模式 -d </span></span><br><span class="line">docker container ls                                <span class="comment"># 查看运行中的容器列表</span></span><br><span class="line">docker container ls -a             <span class="comment">#  查看所有容器，包括没有运行中的</span></span><br><span class="line">docker container stop &lt;<span class="built_in">hash</span>&gt;           <span class="comment"># 根据hash值，停止容器</span></span><br><span class="line">docker container <span class="built_in">kill</span> &lt;<span class="built_in">hash</span>&gt;         <span class="comment"># 强行关闭某个容器</span></span><br><span class="line">docker container rm &lt;<span class="built_in">hash</span>&gt;        <span class="comment"># 删除某个容器</span></span><br><span class="line">docker container rm $(docker container ls -a -q)         <span class="comment"># 删除所有容器</span></span><br><span class="line">docker image ls -a                             <span class="comment"># 查看所有的镜像</span></span><br><span class="line">docker image rm &lt;image id&gt;            <span class="comment"># 根据镜像ID，删除镜像</span></span><br><span class="line">docker image rm $(docker image ls -a -q)   <span class="comment"># 删除所有的镜像</span></span><br><span class="line">docker login             <span class="comment"># 登录</span></span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  <span class="comment"># 为某个镜像打上标签</span></span><br><span class="line">docker push username/repository:tag            <span class="comment"># 上次镜像到远程仓库</span></span><br><span class="line">docker run username/repository:tag                   <span class="comment"># 从远程仓库里运行一个镜像，如果本地没有就先拉取再运行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;容器Containers&quot;&gt;&lt;a href=&quot;#容器Containers&quot; class=&quot;headerlink&quot; title=&quot;容器Containers&quot;&gt;&lt;/a&gt;容器Containers&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="Docker入门" scheme="http://dravinbox.github.io/categories/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门-part1</title>
    <link href="http://dravinbox.github.io/2017/12/22/docker-part1/"/>
    <id>http://dravinbox.github.io/2017/12/22/docker-part1/</id>
    <published>2017-12-22T02:37:31.000Z</published>
    <updated>2017-12-22T04:02:20.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-HelloWorld"><a href="#Docker-HelloWorld" class="headerlink" title="Docker HelloWorld"></a>Docker HelloWorld</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本Docker入门系列文章是翻译于Docker官方getStarted文档,如有出入，请跳转查看<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">官方文档</a></p><h2 id="简单介绍容器"><a href="#简单介绍容器" class="headerlink" title="简单介绍容器"></a>简单介绍容器</h2><blockquote><p>An <strong>image</strong> is a lightweight, stand-alone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.</p></blockquote><p>镜像是一种轻量级的、独立的、可执行的包，它包含运行一个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><blockquote><p>A <strong>container</strong> is a runtime instance of an image—what the image becomes in memory when actually executed. It runs completely isolated from the host environment by default, only accessing host files and ports if configured to do so.</p></blockquote><p>容器是镜像的运行时实例——当实际执行时，镜像会变成内存。默认情况下，它完全与主机环境隔离，如果配置为这样，则只能访问主机文件和端口。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line">...(snipped)...</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmpew1cvarg30j20cudj2.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-HelloWorld&quot;&gt;&lt;a href=&quot;#Docker-HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;Docker HelloWorld&quot;&gt;&lt;/a&gt;Docker HelloWorld&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="Docker入门" scheme="http://dravinbox.github.io/categories/Docker/Docker%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>在docker里部署zookeeper</title>
    <link href="http://dravinbox.github.io/2017/12/21/docker-zookeeper/"/>
    <id>http://dravinbox.github.io/2017/12/21/docker-zookeeper/</id>
    <published>2017-12-21T03:03:55.000Z</published>
    <updated>2017-12-22T02:32:12.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署Zookeeper"><a href="#部署Zookeeper" class="headerlink" title="部署Zookeeper"></a>部署Zookeeper</h1><h2 id="单台机器部署3个zookeeper节点"><a href="#单台机器部署3个zookeeper节点" class="headerlink" title="单台机器部署3个zookeeper节点"></a>单台机器部署3个zookeeper节点</h2><p>首先，初始化swarm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure><p>然后编辑一个文件,如下：</p><figure class="highlight yml"><figcaption><span>docker-compose-single.yml </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    zoo1:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo1</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=0.0.0.0:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    zoo2:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo2</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=0.0.0.0:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    zoo3:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo3</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=0.0.0.0:2888:3888</span>    </span><br><span class="line"><span class="attr">    visualizer:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">        deploy:</span></span><br><span class="line"><span class="attr">            placement:</span></span><br><span class="line"><span class="attr">                constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br></pre></td></tr></table></figure><p>以上的部署文件，定义了4个服务，3个zookeeper和visualizer，visualizer是一个可视化服务，待会你可以用浏览器访问8080端口，查看其他服务的可视化状态。</p><p>使用命令，查看zookeeper的启动情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2181</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2182</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2183</span><br></pre></td></tr></table></figure><p>如果显示如下内容，说明启动成功，zookeeper的容器已经绑定在你本机的2181,2182,2183端口上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Zookeeper version: 3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0, built on 11/01/2017 18:06 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /10.255.0.2:56420[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/0</span><br><span class="line">Received: 1</span><br><span class="line">Sent: 0</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x0</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 4</span><br></pre></td></tr></table></figure><div class="note primary"><h3 id="怎么使用zkCli-sh登陆客户端呢："><a href="#怎么使用zkCli-sh登陆客户端呢：" class="headerlink" title="怎么使用zkCli.sh登陆客户端呢："></a>怎么使用zkCli.sh登陆客户端呢：</h3></div><p>首先,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                          NAMES</span><br><span class="line">99ee6c7335cd        zookeeper:latest                  <span class="string">"/docker-entrypoin..."</span>   17 hours ago        Up 17 hours         2181/tcp, 2888/tcp, 3888/tcp   zoolab_zoo2.1.0rfczhfcn1782fzpb2d6ir2iq</span><br><span class="line">0148b0cc522f        zookeeper:latest                  <span class="string">"/docker-entrypoin..."</span>   17 hours ago        Up 17 hours         2181/tcp, 2888/tcp, 3888/tcp   zoolab_zoo3.1.981cslrn7zqegvvp90r5vx5dm</span><br><span class="line">e534fd292d3f        zookeeper:latest                  <span class="string">"/docker-entrypoin..."</span>   17 hours ago        Up 17 hours         2181/tcp, 2888/tcp, 3888/tcp   zoolab_zoo1.1.k45vcu9hqmzsxf8fg56b5hlx8</span><br><span class="line">12e9ab6ae214        dockersamples/visualizer:stable   <span class="string">"npm start"</span>              17 hours ago        Up 17 hours         8080/tcp                       zoolab_visualizer.1.hbg9c9sx9zd2c3obcaa9nbwgi</span><br></pre></td></tr></table></figure><p>找到zookeeper的容器id : 99ee6c7335cd，0148b0cc522f，e534fd292d3f</p><p>我们现在选择一个容器id，进入容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker  <span class="built_in">exec</span>  -it  99ee6c7335cd bash</span><br><span class="line"></span><br><span class="line">bash-4.4<span class="comment"># ls</span></span><br><span class="line">LICENSE.txt                bin                        dist-maven                 lib                        zookeeper-3.4.11.jar.asc</span><br><span class="line">NOTICE.txt                 build.xml                  docs                       recipes                    zookeeper-3.4.11.jar.md5</span><br><span class="line">README.md                  conf                       ivy.xml                    src                        zookeeper-3.4.11.jar.sha1</span><br><span class="line">README_packaging.txt       contrib                    ivysettings.xml            zookeeper-3.4.11.jar</span><br><span class="line">bash-4.4<span class="comment"># ./bin/zkCli.sh （直接回车即可登陆zk客户端）</span></span><br></pre></td></tr></table></figure><p>即可使用 zk 的 ls , get ,set ,create 等命令,</p><div class="note primary"><h3 id="为了验证3个zookeeper之间的数据是互通的"><a href="#为了验证3个zookeeper之间的数据是互通的" class="headerlink" title="为了验证3个zookeeper之间的数据是互通的"></a>为了验证3个zookeeper之间的数据是互通的</h3></div><p>我们可以登陆到一个容器里的zkCli创建一个节点数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容器99ee6c7335cd里的zkCli里输入</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] create /<span class="built_in">test</span> 123456</span><br><span class="line">Created /<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>我们登陆到另一台的容器的zkCli里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容器0148b0cc522f里的zkCli里输入</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] get /<span class="built_in">test</span></span><br><span class="line">123456</span><br><span class="line">cZxid = 0x100000002</span><br><span class="line">ctime = Thu Dec 21 03:29:15 GMT 2017</span><br><span class="line">mZxid = 0x100000002</span><br><span class="line">mtime = Thu Dec 21 03:29:15 GMT 2017</span><br><span class="line">pZxid = 0x100000002</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 6</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>如果在其他的容器里的zkCli能获取其他容器创建的节点数据，说明他们的数据是互通的。</p><h2 id="多台机器部署3个zookeeper节点"><a href="#多台机器部署3个zookeeper节点" class="headerlink" title="多台机器部署3个zookeeper节点"></a>多台机器部署3个zookeeper节点</h2><p>由于我们没有这么多台机器，我们将虚拟出其他3台虚拟机。</p><p>使用docker-machine 模拟3台机器：</p><div class="note info"><p>Mac,Linux,Win7,Win8 使用virtualbox</p></div><p>首先，您需要一个可以创建虚拟机(vm)的管理程序，因此为您的机器的操作系统安装Oracle VirtualBox。然后使用以下命令创建多台虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --driver virtualbox myvm1</span><br><span class="line">docker-machine create --driver virtualbox myvm2</span><br><span class="line">docker-machine create --driver virtualbox myvm3</span><br></pre></td></tr></table></figure><div class="note info"><p>Win10 使用 hyper-V</p></div><ol><li>登陆Hyper-V 管理系统</li><li>点击右边菜单的Virtual Switch Manager</li><li>在External里点击Create Virtual Switch</li><li>给给他一个名字myswitch ,选中该复选框以共享主机的活动网络适配器</li></ol><p>现在，使用我们的节点管理工具docker-machine创建几个vm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm1</span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm2</span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm3</span><br></pre></td></tr></table></figure><p>接下来我们创建一个部署文件：</p><figure class="highlight yml"><figcaption><span>docker-compose-swarm.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    zoo1:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo1</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"><span class="attr">        networks:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    zoo2:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo2</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"><span class="attr">        networks:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    zoo3:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">zoo3</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"><span class="attr">        networks:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">    visualizer:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">        deploy:</span></span><br><span class="line"><span class="attr">            placement:</span></span><br><span class="line"><span class="attr">                constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"><span class="attr">        networks:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">    webnet:</span></span><br><span class="line"><span class="attr">        driver:</span> <span class="string">overlay</span></span><br></pre></td></tr></table></figure><p>好了，在我们部署之前，我们需要定义好，myvm1为manager,myvm2和myvm3为worker。所以，我们先登陆到myvm1里去初始化swarm(前面也初始化过swarm,不过是单台机器)，然后把myvm2和myvm3加入到这个swarm中，最后才运行部署文件。具体操作如下：</p><h2 id="设置终端环境"><a href="#设置终端环境" class="headerlink" title="设置终端环境"></a>设置终端环境</h2><p>我们不是要去登陆到myvm1里，而是获取myvm1的终端环境到本机的终端，在本机终端操作，从而操作虚拟机。</p><div class="note info"><h3 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac,Linux"></a>Mac,Linux</h3></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker-machine env myvm1</span><br><span class="line"></span><br><span class="line"><span class="comment">#按提示，继续输入命令：</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine env myvm1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker-machine ls</span><br><span class="line"></span><br><span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.06.2-ce   </span><br><span class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure><p>在myvm1 旁边多了个星号，表示成功</p><div class="note info"><h3 id="Winodow"><a href="#Winodow" class="headerlink" title="Winodow"></a>Winodow</h3></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker-machine env myvm1</span><br><span class="line"></span><br><span class="line"><span class="comment">#按提示，继续输入命令：</span></span><br><span class="line">&amp; <span class="string">"C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe"</span> env myvm1 | Invoke-Expression</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER   STATE     URL                          SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   *        hyperv   Running   tcp://192.168.203.207:2376           v17.06.2-ce</span><br><span class="line">myvm2   -        hyperv   Running   tcp://192.168.200.181:2376           v17.06.2-ce</span><br><span class="line"></span><br><span class="line">在myvm1 旁边多了个星号，表示成功</span><br></pre></td></tr></table></figure><p>我们获取好myvm1终端环境，然后我们初始化swarm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr &lt;myvm1 ip&gt;</span><br><span class="line">Swarm initialized: current node &lt;node ID&gt; is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">  docker swarm join \</span><br><span class="line">  --token &lt;token&gt; \</span><br><span class="line">  &lt;myvm ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>它这里提示我们登陆到其他的worker里,输入它上面给出的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取myvm2的终端环境</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine env myvm2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入swarm</span></span><br><span class="line">docker swarm join \</span><br><span class="line">  --token &lt;token&gt; \</span><br><span class="line">  &lt;myvm ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>类似的，我们把myvm3也加入swarm来。</p><p>现在我们要登陆到myvm1里，因为它是manager,用它来进行部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登陆myvm1</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine env myvm1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署</span></span><br><span class="line">docker stack deploy -c docker-compose-swarm.yml zklab</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker stack ps zklab</span><br></pre></td></tr></table></figure><p>验证zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc &lt;myvm1/2/3 ip&gt; 2181</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc &lt;myvm1/2/3 ip&gt; 2182</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc &lt;myvm1/2/3 ip&gt; 2183</span><br></pre></td></tr></table></figure><p>用浏览器查看：<br><a href="http://myvm1/2/3_ip:8080" target="_blank" rel="noopener">http://myvm1/2/3_ip:8080</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;部署Zookeeper&quot;&gt;&lt;a href=&quot;#部署Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;部署Zookeeper&quot;&gt;&lt;/a&gt;部署Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;单台机器部署3个zookeeper节点&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Docker" scheme="http://dravinbox.github.io/categories/Docker/"/>
    
      <category term="部署例子" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/"/>
    
      <category term="Zookeeper" scheme="http://dravinbox.github.io/categories/Docker/%E9%83%A8%E7%BD%B2%E4%BE%8B%E5%AD%90/Zookeeper/"/>
    
    
      <category term="Docker" scheme="http://dravinbox.github.io/tags/Docker/"/>
    
      <category term="Zookeeper" scheme="http://dravinbox.github.io/tags/Zookeeper/"/>
    
  </entry>
  
</feed>
