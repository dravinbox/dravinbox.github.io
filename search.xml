<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在docker里部署zookeeper]]></title>
    <url>%2F2017%2F12%2F21%2Fdocker-zookeeper%2F</url>
    <content type="text"><![CDATA[部署Zookeeper单台机器部署3个zookeeper节点首先，初始化swarm 1docker swarm init 然后编辑一个文件,如下： docker-compose-single.yml 1234567891011121314151617181920212223242526272829303132333435363738394041version: '3.1'services: zoo1: image: zookeeper restart: always hostname: zoo1 ports: - 2181:2181 environment: ZOO_MY_ID: 1 ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zoo2: image: zookeeper restart: always hostname: zoo2 ports: - 2182:2181 environment: ZOO_MY_ID: 2 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888 zoo3: image: zookeeper restart: always hostname: zoo3 ports: - 2183:2181 environment: ZOO_MY_ID: 3 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888 visualizer: image: dockersamples/visualizer:stable ports: - "8080:8080" volumes: - "/var/run/docker.sock:/var/run/docker.sock" deploy: placement: constraints: [node.role == manager] 以上的部署文件，定义了4个服务，3个zookeeper和visualizer，visualizer是一个可视化服务，待会你可以用浏览器访问8080端口，查看其他服务的可视化状态。 使用命令，查看zookeeper的启动情况： 1echo stat | nc 127.0.0.1 2181 或者 1echo stat | nc 127.0.0.1 2182 或者 1echo stat | nc 127.0.0.1 2183 如果显示如下内容，说明启动成功，zookeeper的容器已经绑定在你本机的2181,2182,2183端口上 123456789101112Zookeeper version: 3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0, built on 11/01/2017 18:06 GMTClients: /10.255.0.2:56420[0](queued=0,recved=1,sent=0)Latency min/avg/max: 0/0/0Received: 1Sent: 0Connections: 1Outstanding: 0Zxid: 0x0Mode: followerNode count: 4 怎么使用zkCli.sh登陆客户端呢： 首先,  123456docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES99ee6c7335cd zookeeper:latest "/docker-entrypoin..." 17 hours ago Up 17 hours 2181/tcp, 2888/tcp, 3888/tcp zoolab_zoo2.1.0rfczhfcn1782fzpb2d6ir2iq0148b0cc522f zookeeper:latest "/docker-entrypoin..." 17 hours ago Up 17 hours 2181/tcp, 2888/tcp, 3888/tcp zoolab_zoo3.1.981cslrn7zqegvvp90r5vx5dme534fd292d3f zookeeper:latest "/docker-entrypoin..." 17 hours ago Up 17 hours 2181/tcp, 2888/tcp, 3888/tcp zoolab_zoo1.1.k45vcu9hqmzsxf8fg56b5hlx812e9ab6ae214 dockersamples/visualizer:stable "npm start" 17 hours ago Up 17 hours 8080/tcp zoolab_visualizer.1.hbg9c9sx9zd2c3obcaa9nbwgi 找到zookeeper的容器id : 99ee6c7335cd，0148b0cc522f，e534fd292d3f 我们现在选择一个容器id，进入容器: 12345678docker exec -it 99ee6c7335cd bashbash-4.4# lsLICENSE.txt bin dist-maven lib zookeeper-3.4.11.jar.ascNOTICE.txt build.xml docs recipes zookeeper-3.4.11.jar.md5README.md conf ivy.xml src zookeeper-3.4.11.jar.sha1README_packaging.txt contrib ivysettings.xml zookeeper-3.4.11.jarbash-4.4# ./bin/zkCli.sh （直接回车即可登陆zk客户端） 即可使用 zk 的 ls , get ,set ,create 等命令, 为了验证3个zookeeper之间的数据是互通的 我们可以登陆到一个容器里的zkCli创建一个节点数据： 123#容器99ee6c7335cd里的zkCli里输入[zk: localhost:2181(CONNECTED) 1] create /test 123456Created /test 我们登陆到另一台的容器的zkCli里： 1234567891011121314#容器0148b0cc522f里的zkCli里输入[zk: localhost:2181(CONNECTED) 1] get /test123456cZxid = 0x100000002ctime = Thu Dec 21 03:29:15 GMT 2017mZxid = 0x100000002mtime = Thu Dec 21 03:29:15 GMT 2017pZxid = 0x100000002cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 6numChildren = 0 如果在其他的容器里的zkCli能获取其他容器创建的节点数据，说明他们的数据是互通的。 多台机器部署3个zookeeper节点]]></content>
      <categories>
        <category>Docker</category>
        <category>部署例子</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
</search>
